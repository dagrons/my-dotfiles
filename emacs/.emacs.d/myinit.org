* pre

#+BEGIN_SRC emacs-lisp
  ;; stop create backup files
  (setq make-backup-files nil)
  ;; set font size
  (set-face-attribute 'default nil :height 130)

  ;; 转页时防止cursor跳到中间
  (setq scroll-margin 3
																	scroll-conservatively 101
																	scroll-up-aggressively 0.01
																	scroll-down-aggressively 0.01
																	scroll-preserve-screen-position t
																	auto-window-vscroll nil)
  ;;  (global-display-line-numbers-mode)

  ;; switch window
  (global-set-key (kbd "C-c <left>")  'windmove-left)
  (global-set-key (kbd "C-c <right>") 'windmove-right)
  (global-set-key (kbd "C-c <up>")    'windmove-up)
  (global-set-key (kbd "C-c <down>")  'windmove-down)

  ;; s-x for command pattele
  (global-set-key (kbd "s-x") 'execute-extended-command)

  ;; code navigation
  (global-set-key (kbd "s-=") 'xref-find-definitions)
  (global-set-key (kbd "s--") 'xref-find-references)
  (global-set-key (kbd "s-<mouse-1>") 'xref-find-definitions-at-mouse)
  (global-set-key (kbd "C--") 'previous-buffer)
  (global-set-key (kbd "C-=") 'next-buffer)

  ;; hide tool bar
  (tool-bar-mode 0)
#+END_SRC

#+RESULTS:


* treemacs

#+BEGIN_SRC emacs-lisp
  (use-package treemacs
	;; treemacs is a file and project exlporer similar to NeoTree or vim's NerdTree, but largely inspired by the Project Exlporer in Eclipse.
	:ensure t
	:defer t
	:init
	(with-eval-after-load 'winum
	  (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
	:config
	(progn
	  (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
		treemacs-deferred-git-apply-delay      0.5
		treemacs-directory-name-transformer    #'identity
		treemacs-display-in-side-window        t
		treemacs-eldoc-display                 t
		treemacs-file-event-delay              5000
		treemacs-file-extension-regex          treemacs-last-period-regex-value
		treemacs-file-follow-delay             0.2
		treemacs-file-name-transformer         #'identity
		treemacs-follow-after-init             t
		treemacs-git-command-pipe              ""
		treemacs-goto-tag-strategy             'refetch-index
		treemacs-indentation                   2
		treemacs-indentation-string            " "
		treemacs-is-never-other-window         nil
		treemacs-max-git-entries               5000
		treemacs-missing-project-action        'ask
		treemacs-move-forward-on-expand        nil
		treemacs-no-png-images                 nil
		treemacs-no-delete-other-windows       t
		treemacs-project-follow-cleanup        nil
		treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
		treemacs-position                      'left
		treemacs-read-string-input             'from-child-frame
		treemacs-recenter-distance             0.1
		treemacs-recenter-after-file-follow    nil
		treemacs-recenter-after-tag-follow     nil
		treemacs-recenter-after-project-jump   'always
		treemacs-recenter-after-project-expand 'on-distance
		treemacs-show-cursor                   nil
		treemacs-show-hidden-files             t
		treemacs-silent-filewatch              nil
		treemacs-silent-refresh                nil
		treemacs-sorting                       'alphabetic-asc
		treemacs-space-between-root-nodes      t
		treemacs-tag-follow-cleanup            t
		treemacs-tag-follow-delay              1.5
		treemacs-user-mode-line-format         nil
		treemacs-user-header-line-format       nil
		treemacs-width                         35
		treemacs-workspace-switch-cleanup      nil)

	  ;; The default width and height of the icons is 22 pixels. If you are
	  ;; using a Hi-DPI display, uncomment this to double the icon size.
	  ;;(treemacs-resize-icons 44)

	  (treemacs-follow-mode t)
	  (treemacs-filewatch-mode t)
	  (treemacs-fringe-indicator-mode 'always)
	  (pcase (cons (not (null (executable-find "git")))
		   (not (null treemacs-python-executable)))
		(`(t . t)
		 (treemacs-git-mode 'deferred))
		(`(t . _)
		 (treemacs-git-mode 'simple))))
	:bind
	(:map global-map
	  ("M-0"       . treemacs-select-window)
	  ("C-x t 1"   . treemacs-delete-other-windows)
	  ("C-x t t"   . treemacs)
	  ("C-x t B"   . treemacs-bookmark)
	  ("C-x t C-t" . treemacs-find-file)
	  ("C-x t M-t" . treemacs-find-tag)))


  (use-package treemacs-projectile
	:after (treemacs projectile)
	:ensure t)

  (use-package treemacs-icons-dired
	:after (treemacs dired)
	:ensure t
	:config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
	:after (treemacs magit)
	:ensure t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
	:after (treemacs persp-mode) ;;or perspective vs. persp-mode
	:ensure t
	:config (treemacs-set-scope-type 'Perspectives))
#+END_SRC

#+RESULTS:
: t


* counsel

#+BEGIN_SRC emacs-lisp
  (use-package counsel
	;; ivy-mode ensures that any Emacs command using completing-read-function uses ivy for completion
	;; Counsel take this futher, providing versions of common Emacs commands that are customized to make the best use of ivy
	;; for example, counsel-find-file has some additional keybindings. Pressing [DEL] will move you to the parent directory
	:ensure t
	:bind
	(("M-y" . counsel-yank-pop)
	 :map ivy-minibuffer-map
	 ("M-y" . ivy-next-line)))

  (use-package ivy 
	;; ivy is a generic completion mechanism for Emacs
	:ensure t
	:diminish (ivy-mode) 
	:bind (("C-x b" . ivy-switch-buffer)) ;; keybindings 
	:config ;; executed after loading, :init will be executed before loading
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq ivy-count-format "%d/%d ")
	(setq ivy-display-style 'fancy))

  (use-package swiper 
	;; flexible, simple tools for minibuffer completion in Emacs
	:ensure t
	:bind (("C-s" . swiper-isearch)
	   ("C-r" . swiper-isearch)
	   ("C-c C-r" . ivy-resume)
	   ("M-x" . counsel-M-x)
	   ("C-x C-f" . counsel-find-file))
	:config
	(progn
	  (ivy-mode 1)
	  (setq ivy-use-virtual-buffers t)
	  (setq ivy-display-style 'fancy)
	  (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	  ))

#+END_SRC


* face

#+BEGIN_SRC emacs-lisp
				  (use-package zenburn-theme
					:ensure t
					:config
					(load-theme 'zenburn t))


				  (use-package gruvbox-theme
					:ensure t)

				  (use-package nyan-mode
					:ensure t
					:config
					(nyan-mode t))

				  (use-package powerline
					:ensure t
					:config
					(powerline-default-theme))
#+END_SRC


* python

#+BEGIN_SRC emacs-lisp
  (setq py-python-command "python3") 
  (setq python-shell-interpreter "/opt/homebrew/bin/python3") ;; which python interpreter

  (use-package elpy ;; provides 
	;; elpy is the Emacs Python Development Environment. it aims to provide an easy to install, fully-featured environment for Python development
	:ensure t
	:init
	(add-hook 'python-mode-hook (lambda ()
				  (setq tab-width 8) 
				  (setq indent-tabs-mode nil)
				  (setq py-indent-tabs-mode nil)
				  (setq python-indent-offset 4)))
	(add-hook 'python-mode-hook (lambda()
				  (global-set-key (kbd "s-O")  'elpy-occur-definitions)
				  (global-set-key (kbd "s-s") 'elpy-refactor-rename)))
	:custom (elpy-rpc-backend "jedi") ;; see "company" section for more details
	:config 
	(elpy-enable)
	(setq elpy-rpc-python-command "/opt/homebrew/bin/python3") 
	)

  (use-package jedi ;; auto-completion for python
	:ensure t
	:init
	(add-hook 'python-mode-hook 'jedi:setup)
	(add-hook 'python-mode-hook 'jedi:ac-setup))

  (use-package virtualenvwrapper
	:ensure t
	:config 
	(venv-initialize-interactive-shells)
	(venv-initialize-eshell))

#+END_SRC

#+RESULTS:
: t


* yaml-mode

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+END_SRC


* org-mode

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets 
    ;; to customize org-mode
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    (add-hook 'org-mode-hook (lambda () (setq tab-width 4))))
#+END_SRC


* company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config 
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (global-company-mode t))
#+END_SRC


* flycheck

#+BEGIN_SRC emacs-lisp
  (use-package flycheck ;; for syntax checking
    :ensure t
    :config
    (global-flycheck-mode t))
#+END_SRC


* git

#+BEGIN_SRC emacs-lisp
  (use-package magit 
    :ensure t
    :init 
    (progn
      (bind-key "C-x g" 'magit-status)))
#+END_SRC


* open-with

#+BEGIN_SRC emacs-lisp
  (use-package openwith
    :ensure t
    :config
    (openwith-mode t))
#+END_SRC


* undo tree

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
	  :ensure t
	  :config
	  (global-undo-tree-mode t))
#+END_SRC


* avy

#+BEGIN_SRC emacs-lisp
  (use-package avy 
  ;; which allows you jump you cursor suprisingly fast
  :ensure t
  :bind ("M-s" . avy-goto-char))
#+END_SRC

